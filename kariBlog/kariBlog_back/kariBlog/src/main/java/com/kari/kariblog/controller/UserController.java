package com.kari.kariblog.controller;import com.kari.kariblog.entity.UserEntity;import com.kari.kariblog.service.UserService;import lombok.RequiredArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.io.UnsupportedEncodingException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;@RestController@RequestMapping("/user")@RequiredArgsConstructorpublic class UserController {    private final UserService userService;    /**     * 회원가입     */    @PostMapping("/signup")    private ResponseEntity<Boolean> signup(UserEntity u) throws Exception {        try {            u.setPassword(convertSha2(u.getPassword()));            return new ResponseEntity<>(userService.register(u), HttpStatus.OK);        } catch (Exception e) {            e.printStackTrace();            throw new RuntimeException(e.getMessage());        }    }    /**     * 암호화     */    private String convertSha2(String password) throws Exception {        String converted = null;        StringBuilder builder = null;        try {            MessageDigest md = MessageDigest.getInstance("SHA-256");            // 암호화해주는 클래스를 통해 암호화를 진행한다.            byte[] hash = md.digest(password.getBytes("UTF-8"));            builder = new StringBuilder();            for(int i = 0; i <hash.length; i++) {                builder.append(String.format("%02x", 255 & hash[i]));            }            converted = builder.toString();            // 에러가 발생하면 그 값을 리턴해주는 메소드        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {            e.printStackTrace();        }        return converted;    }    // 중복확인    // 로그인}